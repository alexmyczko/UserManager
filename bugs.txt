Blowfish.h:10:8: style: The function 'encryptpass' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 char* encryptpass(QString passwd) const;
       ^
IHashing.h:12:16: note: Virtual function in base class
 virtual char* encryptpass(QString passwd) const = 0;
               ^
Blowfish.h:10:8: note: Function in derived class
 char* encryptpass(QString passwd) const;
       ^
Blowfish.h:11:10: style: The function 'Free' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    void Free();
         ^
IHashing.h:13:15: note: Virtual function in base class
 virtual void Free() = 0;
              ^
Blowfish.h:11:10: note: Function in derived class
    void Free();
         ^
sha256.h:10:8: style: The function 'encryptpass' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 char* encryptpass(QString passwd) const;
       ^
IHashing.h:12:16: note: Virtual function in base class
 virtual char* encryptpass(QString passwd) const = 0;
               ^
sha256.h:10:8: note: Function in derived class
 char* encryptpass(QString passwd) const;
       ^
sha256.h:11:10: style: The function 'Free' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    void Free();
         ^
IHashing.h:13:15: note: Virtual function in base class
 virtual void Free() = 0;
              ^
sha256.h:11:10: note: Function in derived class
    void Free();
         ^
sha512.h:10:8: style: The function 'encryptpass' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 char* encryptpass(QString passwd) const;
       ^
IHashing.h:12:16: note: Virtual function in base class
 virtual char* encryptpass(QString passwd) const = 0;
               ^
sha512.h:10:8: note: Function in derived class
 char* encryptpass(QString passwd) const;
       ^
sha512.h:11:10: style: The function 'Free' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    void Free();
         ^
IHashing.h:13:15: note: Virtual function in base class
 virtual void Free() = 0;
              ^
sha512.h:11:10: note: Function in derived class
    void Free();
         ^
Md5.h:20:8: style: The function 'encryptpass' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 char* encryptpass(QString passwd) const;
       ^
IHashing.h:12:16: note: Virtual function in base class
 virtual char* encryptpass(QString passwd) const = 0;
               ^
Md5.h:20:8: note: Function in derived class
 char* encryptpass(QString passwd) const;
       ^
Md5.h:21:10: style: The function 'Free' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    void Free();
         ^
IHashing.h:13:15: note: Virtual function in base class
 virtual void Free() = 0;
              ^
Md5.h:21:10: note: Function in derived class
    void Free();
         ^
MainWindow.cpp:17:5: error: Using object to temporary. [danglingTemporaryLifetime]
 if(selectedLanguage=="Greek")
    ^
MainWindow.cpp:16:38: note: Pointer to container is created here.
 QString selectedLanguage=set.getconf("LANGUAGE").c_str();
                                     ^
MainWindow.cpp:17:5: note: Using object to temporary.
 if(selectedLanguage=="Greek")
    ^
MainWindow.cpp:138:2: warning: Either the condition 'hash!=nullptr' is redundant or there is possible null pointer dereference: hash. [nullPointerRedundantCheck]
 hash->NameLabelHidden->setText(username);
 ^
MainWindow.cpp:142:11: note: Assuming that condition 'hash!=nullptr' is not redundant
 if (hash != nullptr) { delete hash; hash = nullptr; }
          ^
MainWindow.cpp:138:2: note: Null pointer dereference
 hash->NameLabelHidden->setText(username);
 ^
MainWindow.cpp:139:2: warning: Either the condition 'hash!=nullptr' is redundant or there is possible null pointer dereference: hash. [nullPointerRedundantCheck]
 hash->UserNameLabel->setText("<font color='Red'>" + username + "</font>");
 ^
MainWindow.cpp:142:11: note: Assuming that condition 'hash!=nullptr' is not redundant
 if (hash != nullptr) { delete hash; hash = nullptr; }
          ^
MainWindow.cpp:139:2: note: Null pointer dereference
 hash->UserNameLabel->setText("<font color='Red'>" + username + "</font>");
 ^
MainWindow.cpp:303:5: style: Redundant initialization for 'sp'. The initialized value is overwritten before it is read. [redundantInitialization]
 sp = getspnam(log.toLatin1().data());
    ^
MainWindow.cpp:302:18: note: sp is initialized
 struct spwd *sp = {};
                 ^
MainWindow.cpp:303:5: note: sp is overwritten
 sp = getspnam(log.toLatin1().data());
    ^
MainWindow.cpp:355:8: style: Redundant initialization for 'passs'. The initialized value is overwritten before it is read. [redundantInitialization]
 passs = getpwnam(username.toLatin1().data());
       ^
MainWindow.cpp:353:23: note: passs is initialized
 struct passwd *passs = {};
                      ^
MainWindow.cpp:355:8: note: passs is overwritten
 passs = getpwnam(username.toLatin1().data());
       ^
MainWindow.cpp:753:6: style: Redundant initialization for 'spw'. The initialized value is overwritten before it is read. [redundantInitialization]
 spw = getspnam ( login );
     ^
MainWindow.cpp:747:19: note: spw is initialized
 struct spwd *spw ={};
                  ^
MainWindow.cpp:753:6: note: spw is overwritten
 spw = getspnam ( login );
     ^
MainWindow.cpp:345:6: style: The scope of the variable 'okk' can be reduced. [variableScope]
 int okk = 0;
     ^
MainWindow.cpp:346:6: style: The scope of the variable 'result2' can be reduced. [variableScope]
 int result2 = 0;
     ^
MainWindow.cpp:347:6: style: The scope of the variable 'result' can be reduced. [variableScope]
 int result = 0;
     ^
MainWindow.cpp:751:7: style: The scope of the variable 'buff' can be reduced. [variableScope]
 char buff[256], day_buffer[256],month_buffer[256],year_buffer[256];
      ^
MainWindow.cpp:751:18: style: The scope of the variable 'day_buffer' can be reduced. [variableScope]
 char buff[256], day_buffer[256],month_buffer[256],year_buffer[256];
                 ^
MainWindow.cpp:751:34: style: The scope of the variable 'month_buffer' can be reduced. [variableScope]
 char buff[256], day_buffer[256],month_buffer[256],year_buffer[256];
                                 ^
MainWindow.cpp:751:52: style: The scope of the variable 'year_buffer' can be reduced. [variableScope]
 char buff[256], day_buffer[256],month_buffer[256],year_buffer[256];
                                                   ^
MainWindow.cpp:490:15: style: Local variable 'index' shadows outer variable [shadowVariable]
  QModelIndex index = groupTreeView->selectionModel()->currentIndex ( );
              ^
MainWindow.cpp:475:14: note: Shadowed declaration
 QModelIndex index=groupTreeView->selectionModel()->currentIndex();
             ^
MainWindow.cpp:490:15: note: Shadow variable
  QModelIndex index = groupTreeView->selectionModel()->currentIndex ( );
              ^
MainWindow.cpp:345:10: style: Variable 'okk' is assigned a value that is never used. [unreadVariable]
 int okk = 0;
         ^
MainWindow.cpp:346:14: style: Variable 'result2' is assigned a value that is never used. [unreadVariable]
 int result2 = 0;
             ^
MainWindow.cpp:347:13: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
 int result = 0;
            ^
MainWindow.cpp:354:20: style: Variable 'grr' is assigned a value that is never used. [unreadVariable]
 struct group *grr = {};
                   ^
MainWindow.cpp:405:22: style: Variable 'pathway' is assigned a value that is never used. [unreadVariable]
     QString pathway = path.data();
                     ^
MainWindow.cpp:714:12: style: Variable 'p.pw_name' is assigned a value that is never used. [unreadVariable]
 p.pw_name = log.toLatin1().data();
           ^
MainWindow.cpp:748:20: style: Variable 'ltime' is assigned a value that is never used. [unreadVariable]
 struct  tm *ltime = {};
                   ^
MainWindow.cpp:868:36: style: Variable 'progress' is assigned a value that is never used. [unreadVariable]
  float cnt=1,totalUsers=0,progress=0;// parolo pou einai int kanonika an ta dhlwsw san int den leitourgei h progressbar swsta
                                   ^
MainWindow.cpp:871:21: style: Variable 'totalSize' is assigned a value that is never used. [unreadVariable]
 uint64_t totalSize = 0;//unsigned long int
                    ^
Settings.cpp:69:9: style: The scope of the variable 'found' can be reduced. [variableScope]
 size_t found=' ';
        ^
Settings.cpp:143:7: style: The scope of the variable 'done' can be reduced. [variableScope]
 bool done=false;
      ^
Settings.cpp:144:9: style: The scope of the variable 'found' can be reduced. [variableScope]
 size_t found=' ';
        ^
Settings.cpp:154:10: style: Local variable 'file' shadows outer variable [shadowVariable]
 fstream file ( "/var/spool/cron/crontabs/root",ios::in|ios::out );
         ^
Settings.cpp:145:11: note: Shadowed declaration
 ifstream file("/var/spool/cron/crontabs/root",ios::out);
          ^
Settings.cpp:154:10: note: Shadow variable
 fstream file ( "/var/spool/cron/crontabs/root",ios::in|ios::out );
         ^
Settings.cpp:69:14: style: Variable 'found' is assigned a value that is never used. [unreadVariable]
 size_t found=' ';
             ^
Settings.cpp:70:12: style: Variable 'pos' is assigned a value that is never used. [unreadVariable]
 size_t pos=' ';
           ^
Settings.cpp:77:16: style: Variable 'found' is assigned a value that is never used. [unreadVariable]
  if ( ( found = line.find ( setting,0 ) ) != string::npos ) //vre8hke h ry8mish
               ^
Settings.cpp:144:14: style: Variable 'found' is assigned a value that is never used. [unreadVariable]
 size_t found=' ';
             ^
Settings.cpp:158:16: style: Variable 'found' is assigned a value that is never used. [unreadVariable]
  if ( ( found = line.find ( command,0 ) ) != string::npos )
               ^
Settings.cpp:188:4: style: Variable 'ax1' is assigned a value that is never used. [unreadVariable]
ax1=languageCombo->currentText();
   ^
Settings.cpp:189:4: style: Variable 'ax2' is assigned a value that is never used. [unreadVariable]
ax2=getconf("LANGUAGE").c_str();
   ^
editProperties.cpp:207:4: error: Memory leak: cp [memleak]
   cp = newf.username;
   ^
editProperties.cpp:230:31: error: Mismatching allocation and deallocation: cp [mismatchAllocDealloc]
 if ( cp != nullptr) { delete cp; cp = nullptr;}
                              ^
editProperties.cpp:133:21: note: Mismatching allocation and deallocation: cp
 char *cp = (char *)calloc(64, sizeof(char));
                    ^
editProperties.cpp:230:31: note: Mismatching allocation and deallocation: cp
 if ( cp != nullptr) { delete cp; cp = nullptr;}
                              ^
editProperties.cpp:55:1: warning: Either the condition 'hash!=nullptr' is redundant or there is possible null pointer dereference: hash. [nullPointerRedundantCheck]
hash->NameLabelHidden->setText(username);
^
editProperties.cpp:59:10: note: Assuming that condition 'hash!=nullptr' is not redundant
if (hash != nullptr){ delete hash; hash = nullptr;}
         ^
editProperties.cpp:55:1: note: Null pointer dereference
hash->NameLabelHidden->setText(username);
^
editProperties.cpp:56:1: warning: Either the condition 'hash!=nullptr' is redundant or there is possible null pointer dereference: hash. [nullPointerRedundantCheck]
hash->UserNameLabel->setText("<font color='Red'>" + username + "</font>");
^
editProperties.cpp:59:10: note: Assuming that condition 'hash!=nullptr' is not redundant
if (hash != nullptr){ delete hash; hash = nullptr;}
         ^
editProperties.cpp:56:1: note: Null pointer dereference
hash->UserNameLabel->setText("<font color='Red'>" + username + "</font>");
^
editProperties.cpp:345:22: style: Same expression on both sides of '-'. [duplicateExpression]
  newtime.tm_mon = 1 - 1;
                     ^
editProperties.cpp:422:7: style: The scope of the variable 'disable' can be reduced. [variableScope]
char *disable;
      ^
editProperties.cpp:473:8: style: The scope of the variable 'cmd' can be reduced. [variableScope]
 char *cmd;
       ^
editProperties.cpp:792:8: style: The scope of the variable 'cmd' can be reduced. [variableScope]
 char *cmd;
       ^
editProperties.cpp:475:6: style: Local variable 'row' shadows outer variable [shadowVariable]
 int row=index.row();
     ^
editProperties.cpp:468:6: note: Shadowed declaration
 int row=index.row();
     ^
editProperties.cpp:475:6: note: Shadow variable
 int row=index.row();
     ^
editProperties.cpp:423:16: style: Variable 'account' is assigned a value that is never used. [unreadVariable]
string account = "";
               ^
groupProperties.cpp:155:1: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
this->~GroupProperties();
^
groupProperties.cpp:86:8: style: The scope of the variable 'cmd' can be reduced. [variableScope]
 char *cmd;
       ^
groupProperties.cpp:121:8: style: The scope of the variable 'username' can be reduced. [variableScope]
 char *username;
       ^
groupProperties.cpp:142:8: style: The scope of the variable 'cmd' can be reduced. [variableScope]
 char *cmd;
       ^
groupProperties.cpp:221:16: style: The scope of the variable 'grp' can be reduced. [variableScope]
 struct group *grp;
               ^
groups.cpp:51:8: style: The scope of the variable 'groupToSearch' can be reduced. [variableScope]
 char *groupToSearch;
       ^
groups.cpp:23:16: style: Variable 'allmem' is assigned a value that is never used. [unreadVariable]
QString allmem = "";
               ^
groups.cpp:38:8: style: Variable 'allmem' is assigned a value that is never used. [unreadVariable]
allmem = "";
       ^
main.cpp:71:15: warning: Either the condition 'user!=nullptr' is redundant or there is possible null pointer dereference: user. [nullPointerRedundantCheck]
  if (strncmp(user , "root", strlen(user)) != 0)
              ^
main.cpp:74:13: note: Assuming that condition 'user!=nullptr' is not redundant
   if (user !=  nullptr) { free(user); user = nullptr;   }
            ^
main.cpp:71:15: note: Null pointer dereference
  if (strncmp(user , "root", strlen(user)) != 0)
              ^
moc_About.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_HashingAlgorithm.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_MainWindow.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_Settings.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_editProperties.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_groupProperties.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_groups.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_myLibb.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_userproperties.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
moc_users.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
myLibb.cpp:345:13: style: Condition 'linebuf!=NULL' is always true [knownConditionTrueFalse]
 if (linebuf!=NULL) free(linebuf);
            ^
myLibb.cpp:293:5: note: Assuming that condition '!linebuf' is not redundant
if (!linebuf) return -1;
    ^
myLibb.cpp:313:13: note: Assuming condition is false
    if (ret == -1) return -1;
            ^
myLibb.cpp:345:13: note: Condition 'linebuf!=NULL' is always true
 if (linebuf!=NULL) free(linebuf);
            ^
myLibb.cpp:424:15: style: Condition 'linebuf!=NULL' is always true [knownConditionTrueFalse]
  if (linebuf != NULL) free(linebuf);
              ^
myLibb.cpp:374:8: note: Assuming that condition '!linebuf' is not redundant
   if (!linebuf) return -1;
       ^
myLibb.cpp:394:13: note: Assuming condition is false
    if (ret == -1) return -1;
            ^
myLibb.cpp:424:15: note: Condition 'linebuf!=NULL' is always true
  if (linebuf != NULL) free(linebuf);
              ^
qrc_images.cpp:5417:0: information: Skipping configuration 'QT_NAMESPACE' since the value of 'QT_NAMESPACE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
namespace QT_NAMESPACE {
^
qrc_images.cpp:5431:0: information: Skipping configuration 'QT_NAMESPACE' since the value of 'QT_NAMESPACE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    QT_RCC_PREPEND_NAMESPACE(qRegisterResourceData)
^
qrc_images.cpp:5439:0: information: Skipping configuration 'QT_NAMESPACE' since the value of 'QT_NAMESPACE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    QT_RCC_PREPEND_NAMESPACE(qUnregisterResourceData)
^
userproperties.cpp:579:3: error: Memory leak: cmd [memleak]
  cmd=command.toLatin1().data();
  ^
userproperties.cpp:601:12: error: Mismatching allocation and deallocation: cmd [mismatchAllocDealloc]
 delete [] cmd;
           ^
userproperties.cpp:571:15: note: Mismatching allocation and deallocation: cmd
 char *cmd  = new char;
              ^
userproperties.cpp:601:12: note: Mismatching allocation and deallocation: cmd
 delete [] cmd;
           ^
userproperties.cpp:392:6: style: The scope of the variable 'pass_done' can be reduced. [variableScope]
 int pass_done = 0;
     ^
userproperties.cpp:393:6: style: The scope of the variable 'pid' can be reduced. [variableScope]
 int pid;
     ^
userproperties.cpp:394:6: style: The scope of the variable 'pid1' can be reduced. [variableScope]
 int pid1;
     ^
userproperties.cpp:395:6: style: The scope of the variable 'pid2' can be reduced. [variableScope]
 int pid2;
     ^
userproperties.cpp:397:6: style: The scope of the variable 'shadow_done' can be reduced. [variableScope]
 int shadow_done = 0 ;
     ^
userproperties.cpp:400:17: style: The scope of the variable 'u' can be reduced. [variableScope]
 struct passwd *u;
                ^
userproperties.cpp:886:8: style: The scope of the variable 'cmd' can be reduced. [variableScope]
 char *cmd;
       ^
userproperties.cpp:982:16: style: The scope of the variable 'grp' can be reduced. [variableScope]
 struct group *grp;
               ^
userproperties.cpp:987:14: style: The scope of the variable 'groupname' can be reduced. [variableScope]
 const char *groupname="";
             ^
userproperties.cpp:988:8: style: The scope of the variable 'cmd' can be reduced. [variableScope]
 char *cmd;
       ^
userproperties.cpp:574:6: style: Local variable 'row' shadows outer variable [shadowVariable]
 int row=index.row();
     ^
userproperties.cpp:566:6: note: Shadowed declaration
 int row=index.row();
     ^
userproperties.cpp:574:6: note: Shadow variable
 int row=index.row();
     ^
userproperties.cpp:257:90: performance: Function parameter 'inact_user' should be passed by const reference. [passedByValue]
struct spwd  UserProperties::setShadowStruct(int max, int warn,int inact, int min,string inact_user,char * name,char * password_hash,int current_days)
                                                                                         ^
userproperties.cpp:572:24: error: Memory is allocated but not initialized: cmd [uninitdata]
 cmd = new char[strlen(cmd)+1];
                       ^
userproperties.cpp:987:23: style: Variable 'groupname' is assigned a value that is never used. [unreadVariable]
 const char *groupname="";
                      ^
users.cpp:25:8: style: The scope of the variable 'userToSearch' can be reduced. [variableScope]
 char *userToSearch ;
       ^
users.cpp:139:9: style: The scope of the variable 'c' can be reduced. [variableScope]
 int i, c;
        ^
MainWindow.cpp:583:0: style: The function 'eventFilter' is never used. [unusedFunction]

^
editProperties.cpp:277:0: style: The function 'set_Pass_info' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

